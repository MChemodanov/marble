// Copyright 2010 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Marble
{
const int tessellationPrecision;
const int latLonAltBoxSamplingRate;
class AbstractProjection /Abstract/
{
%TypeHeaderCode
#include <AbstractProjection.h>
%End

public:
    enum SurfaceType
    {
        Cylindrical,
        Pseudocylindrical,
        Hybrid,
        Conical,
        Pseudoconical,
        Azimuthal
    };
    enum PreservationType
    {
        NoPreservation,
        Conformal,
        EqualArea
    };
                            AbstractProjection ();
    virtual ~AbstractProjection ();
    virtual qreal           maxValidLat () const;
    qreal                   maxLat () const;
    void                    setMaxLat (qreal maxLat);
    virtual qreal           minValidLat () const;
    qreal                   minLat () const;
    void                    setMinLat (qreal minLat);
    virtual bool            repeatableX () const;
    bool                    repeatX () const;
    void                    setRepeatX (bool repeatX);
    virtual bool            traversablePoles () const;
    virtual bool            traversableDateLine () const;
    virtual Marble::AbstractProjection::SurfaceType  surfaceType () const=0;
    virtual Marble::AbstractProjection::PreservationType  preservationType () const;
    virtual bool            isOrientedNormal () const;
    virtual bool            screenCoordinates (const qreal lon, const qreal lat, const Marble::ViewportParams* viewport, qreal& x, qreal& y)=0;
    virtual bool            screenCoordinates (const Marble::GeoDataCoordinates& geopoint, const Marble::ViewportParams* viewport, qreal& x, qreal& y, bool& globeHidesPoint)=0;
//ig    bool                    screenCoordinates (const Marble::GeoDataCoordinates& geopoint, const Marble::ViewportParams* viewport, qreal& x, qreal& y);
    bool                    screenCoordinates (const Marble::GeoDataCoordinates& geopoint, const Marble::ViewportParams* viewport, QPointF& screenpoint);
//ig    bool                    screenCoordinates (const Marble::GeoDataCoordinates& coordinates, const Marble::ViewportParams* viewport, qreal* x, qreal& y, int& pointRepeatNum, bool& globeHidesPoint);
    virtual bool            screenCoordinates (const Marble::GeoDataCoordinates& coordinates, const Marble::ViewportParams* viewport, qreal* x, qreal& y, int& pointRepeatNum, const QSizeF& size, bool& globeHidesPoint)=0;
//ig    bool                    screenCoordinates (const Marble::GeoDataLineString& lineString, const Marble::ViewportParams* viewport, QVector<QPolygonF*>& polygons);
    virtual bool            geoCoordinates (const int x, const int y, const Marble::ViewportParams* viewport, qreal& lon, qreal& lat, Marble::GeoDataCoordinates::Unit unit = Marble::GeoDataCoordinates::Degree)=0;
    virtual Marble::GeoDataLatLonAltBox  latLonAltBox (const QRect& screenRect, const Marble::ViewportParams* viewport);
    bool                    exceedsLatitudeRange (const Marble::GeoDataCoordinates& coords) const;
    bool                    exceedsLatitudeRange (const Marble::GeoDataLineString& lineString) const;
    virtual bool            mapCoversViewport (const Marble::ViewportParams* viewport) const=0;
    virtual QPainterPath    mapShape (const Marble::ViewportParams* viewport) const=0;
    QRegion                 mapRegion (const Marble::ViewportParams* viewport) const;
//ig    bool                    screenCoordinates (qreal lon, qreal lat, const Marble::ViewportParams* viewport, int& x, int& y);
//ig    bool                    screenCoordinates (const Marble::GeoDataCoordinates& geopoint, const Marble::ViewportParams* viewport, int& x, int& y, bool& globeHidesPoint);
protected:
//ig    bool                    lineStringToPolygon (const Marble::GeoDataLineString& lineString, const Marble::ViewportParams* viewport, QVector<QPolygonF*>& polygons);
    virtual void            horizonToPolygon (const Marble::ViewportParams* viewport, const Marble::GeoDataCoordinates& disappearCoords, const Marble::GeoDataCoordinates& reappearCoords, QPolygonF*);
    void                    tessellateLineSegment (const Marble::GeoDataCoordinates& aCoords, qreal ax, qreal ay, const Marble::GeoDataCoordinates& bCoords, qreal bx, qreal by, QPolygonF* polygon, const Marble::ViewportParams* viewport, Marble::TessellationFlags f = 0);
};
};
