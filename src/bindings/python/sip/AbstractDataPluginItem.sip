//
//     Copyright 2009 Simon Edwards

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


%ModuleHeaderCode
//ctscc
#include <AbstractDataPlugin.h>
#include <AbstractDataPluginItem.h>
#include <AbstractDataPluginModel.h>
#include <AbstractFloatItem.h>
#include <AbstractWorkerThread.h>
#include <LatLonEdit.h>
#include <MapThemeManager.h>
#include <MarbleAboutDialog.h>
#include <MarbleControlBox.h>
#include <MarbleMap.h>
#include <MarbleModel.h>
#include <MarbleNavigator.h>
#include <MarbleWidget.h>
#include <PluginAboutDialog.h>
#include <QtMarbleConfigDialog.h>
#include <RenderPlugin.h>
#include <SunLocator.h>
#include <TileCreator.h>
#include <TinyWebBrowser.h>
#include <qobject.h>
%End

namespace Marble
{

class AbstractDataPluginItem : QObject /Abstract/
{
%TypeHeaderCode
#include <AbstractDataPluginItem.h>
%End

public:
                            AbstractDataPluginItem (QObject* parent /TransferThis/ = 0);
    QString                 target ();
    void                    setTarget (const QString& target);
    QString                 id () const;
    void                    setId (const QString& id);
    qreal                   addedAngularResolution () const;
    void                    setAddedAngularResolution (qreal resolution);
    virtual QAction*        action ()=0;
    virtual QString         itemType () const=0;
    virtual bool            initialized ()=0;
    virtual void            addDownloadedFile (const QString& url, const QString& type)=0;
    virtual bool            operator < (const Marble::AbstractDataPluginItem* other) const =0;


//  Subclasses of QObject

%ConvertToSubClassCode
    // CTSCC for subclasses of 'QObject'
    sipType = NULL;

    if (dynamic_cast<Marble::AbstractDataPluginItem*>(sipCpp))
        sipType = sipType_Marble_AbstractDataPluginItem;
    else if (dynamic_cast<Marble::AbstractDataPluginModel*>(sipCpp))
        sipType = sipType_Marble_AbstractDataPluginModel;
    else if (dynamic_cast<Marble::MapThemeManager*>(sipCpp))
        sipType = sipType_Marble_MapThemeManager;
    else if (dynamic_cast<Marble::MarbleMap*>(sipCpp))
        sipType = sipType_Marble_MarbleMap;
    else if (dynamic_cast<Marble::MarbleModel*>(sipCpp))
        sipType = sipType_Marble_MarbleModel;
    else if (dynamic_cast<Marble::RenderPlugin*>(sipCpp))
        {
        sipType = sipType_Marble_RenderPlugin;
        if (dynamic_cast<Marble::AbstractDataPlugin*>(sipCpp))
            sipType = sipType_Marble_AbstractDataPlugin;
        else if (dynamic_cast<Marble::AbstractFloatItem*>(sipCpp))
            sipType = sipType_Marble_AbstractFloatItem;
        }
    else if (dynamic_cast<Marble::SunLocator*>(sipCpp))
        sipType = sipType_Marble_SunLocator;
    else if (dynamic_cast<Marble::AbstractWorkerThread*>(sipCpp))
        sipType = sipType_Marble_AbstractWorkerThread;
    else if (dynamic_cast<Marble::TileCreator*>(sipCpp))
        sipType = sipType_Marble_TileCreator;
    else if (dynamic_cast<Marble::LatLonEdit*>(sipCpp))
        sipType = sipType_Marble_LatLonEdit;
    else if (dynamic_cast<Marble::MarbleControlBox*>(sipCpp))
        sipType = sipType_Marble_MarbleControlBox;
    else if (dynamic_cast<Marble::MarbleNavigator*>(sipCpp))
        sipType = sipType_Marble_MarbleNavigator;
    else if (dynamic_cast<Marble::MarbleWidget*>(sipCpp))
        sipType = sipType_Marble_MarbleWidget;
    else if (dynamic_cast<Marble::MarbleAboutDialog*>(sipCpp))
        sipType = sipType_Marble_MarbleAboutDialog;
    else if (dynamic_cast<Marble::PluginAboutDialog*>(sipCpp))
        sipType = sipType_Marble_PluginAboutDialog;
    else if (dynamic_cast<Marble::QtMarbleConfigDialog*>(sipCpp))
        sipType = sipType_Marble_QtMarbleConfigDialog;
    else if (dynamic_cast<Marble::TinyWebBrowser*>(sipCpp))
        sipType = sipType_Marble_TinyWebBrowser;
%End

    virtual ~AbstractDataPluginItem ();
    virtual void            setSettings (QHash<QString,QVariant> settings);
    virtual bool            isGeoProjected ();
signals:
    void                    updated ();
};
// AbstractDataPluginItem

};
// Marble


